aws codestar-connections get-connection \
  --connection-arn arn:aws:codestar-connections:us-east-1:785032444795:connection/b0d6f7d5-3ff1-4136-af55-46bda6041b00 \
  --query 'Connection.ConnectionStatus'

aws codepipeline get-pipeline --name trd-foundation-pipeline \
  --query 'pipeline.stages[].name'

EXEC_ID=$(aws codepipeline start-pipeline-execution \
  --name trd-foundation-pipeline --query pipelineExecutionId --output text)

aws codepipeline get-pipeline-execution \
  --pipeline-name trd-foundation-pipeline --pipeline-execution-id "$EXEC_ID" \
  --query 'pipelineExecution.status'

aws codepipeline get-pipeline-state --name trd-foundation-pipeline \
  --query 'stageStates[].{Stage:stageName,Status:latestExecution.status,Action:actionStates[0].actionName}'

aws codebuild list-builds-for-project \
  --project-name trd-foundation-pipeline-build --max-items 1 --query 'ids[0]' --output text | \
xargs -I {} aws codebuild batch-get-builds --ids {} \
  --query 'builds[0].logs.deepLink' --output text

aws cloudformation describe-stacks \
  --stack-name trd-codepipeline-github \
  --query 'Stacks[0].{Status:StackStatus,Outputs:Outputs}'

aws s3 ls s3://trd-artifacts-785032444795-us-east-1/ --recursive | head

BOOT=trd-bootstrap-artifacts
ROLES=trd-iam-roles

BUCKET_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='${BOOT}-ArtifactBucketName'].Value" --output text)
CP_ROLE_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='${ROLES}-CodePipelineRoleArn'].Value" --output text)
CB_ROLE_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='${ROLES}-CodeBuildRoleArn'].Value" --output text)
CFN_EXEC_ROLE_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='${ROLES}-CloudFormationExecutionRoleArn'].Value" --output text)
CONNECTION_ARN=$(aws codestar-connections list-connections  --query 'Connections[0].ConnectionArn' --output text)

echo $BOOT; echo $ROLES; echo $CP_ROLE_ARN; echo $CB_ROLE_ARN; echo $CFN_EXEC_ROLE_ARN;echo $CONNECTION_ARN


aws cloudformation deploy \
  --stack-name trd-codepipeline-github \
  --template-file cloudformation/stacks/codepipeline-github.yml \
  --parameter-overrides \
      PipelineName=trd-foundation-pipeline \
      ArtifactBucketName=$BUCKET_NAME \
      CodePipelineRoleArn=$CP_ROLE_ARN \
      CloudFormationExecutionRoleArn=$CFN_EXEC_ROLE_ARN \
      ConnectionArn=arn:$CONNECTION_ARN \
      FullRepositoryId=MouradNASRI/TradeMesh \
      BranchName=main \
      CreateBuildProject=true \
      CodeBuildServiceRoleArn=$CB_ROLE_ARN \
      StackName=trd-foundation-test \
      TemplateFilePath=app/app-template.yml \
      ChangeSetName=cs-foundation

PROJECT=$(aws cloudformation describe-stacks \
  --stack-name trd-codepipeline-github \
  --query "Stacks[0].Outputs[?OutputKey=='BuildProjectNameOut'].OutputValue" \
  --output text
)

aws codebuild list-builds-for-project --project-name $PROJECT

EXEC_ID=$(aws codepipeline start-pipeline-execution \
  --name trd-foundation-pipeline \
  --query pipelineExecutionId --output text)

BUILD_ID=$(aws codepipeline get-pipeline-state --name trd-foundation-pipeline \
  --query "stageStates[?stageName=='Build'].actionStates[0].latestExecution.externalExecutionId" \
  --output text)

aws iam put-role-policy \
  --role-name $CP_ROLE_ARN \
  --policy-name AllowUseConnection \
  --policy-document "{
    \"Version\":\"2012-10-17\",
    \"Statement\":[{ 
      \"Effect\":\"Allow\",
      \"Action\":[\"codestar-connections:UseConnection\",\"codeconnections:UseConnection\"],
      \"Resource\":$CONNEXION_ARN
    }]
  }"

  aws codebuild batch-get-projects --names trd-foundation-pipeline-build \
  --query 'projects[0].logsConfig'

  ID=$(aws codebuild list-builds-for-project --project-name trd-foundation-pipeline-build --max-results 1 --query 'ids[0]' --output text)
aws codebuild batch-get-builds --ids "$ID" --query 'builds[0].logs.deepLink' --output text

aws cloudformation deploy \
  --region us-east-1 \
  --stack-name trd-codepipeline-github \
  --template-file cloudformation/stacks/codepipeline-github.yml \
  --parameter-overrides \
      PipelineName=trd-foundation-pipeline \
      ArtifactBucketName=$BUCKET_NAME \
      CodePipelineRoleArn=$CP_ROLE_ARN \
      CloudFormationExecutionRoleArn=$CFN_EXEC_ROLE_ARN \
      ConnectionArn=$CONNEXION_ARN \
      FullRepositoryId=MouradNASRI/TradeMesh \
      BranchName=main \
      CreateBuildProject=true \
      CodeBuildServiceRoleArn=$CB_ROLE_ARN \
      StackName=trd-networking \
      TemplateFilePath=cloudformation/stacks/networking.yml \
      TemplateConfigPath=cloudformation/envs/dev/networking-params.json \
      ChangeSetName=cs-networking


aws cloudformation deploy \
  --region "$AWS_REGION" \
  --stack-name trd-codepipeline-github \
  --template-file cloudformation/stacks/codepipeline-github.yml \
  --parameter-overrides \
      PipelineName=trd-foundation-pipeline \
      ArtifactBucketName="$BUCKET_NAME" \
      CodePipelineRoleArn="$CP_ROLE_ARN" \
      CloudFormationExecutionRoleArn="$CFN_EXEC_ROLE_ARN" \
      ConnectionArn="$CONNEXION_ARN" \
      FullRepositoryId="MouradNASRI/TradeMesh" \
      BranchName=main \
      CreateBuildProject=true \
      CodeBuildServiceRoleArn="$CB_ROLE_ARN" \
      StackName=trd-networking \
      TemplateFilePath=cloudFormation/stacks/networking.yml \
      TemplateConfigPath=cloudFormation/envs/dev/networking-params.json \
      ChangeSetName=cs-networking

aws codepipeline start-pipeline-execution --region us-east-1 --name trd-foundation-pipeline

aws cloudformation describe-stacks --region us-east-1 \
  --stack-name trd-networking --query 'Stacks[0].StackStatus'


aws cloudformation validate-template \
  --template-body file://cloudformation/stacks/networking.yml


aws cloudformation deploy \
  --region "$AWS_REGION" \
  --stack-name trd-codepipeline-github \
  --template-file cloudformation/stacks/codepipeline-github.yml \
  --parameter-overrides \
      PipelineName=trd-foundation-pipeline \
      ArtifactBucketName="$BUCKET_NAME" \
      CodePipelineRoleArn="$CP_ROLE_ARN" \
      CloudFormationExecutionRoleArn="$CFN_EXEC_ROLE_ARN" \
      ConnectionArn="$CONNEXION_ARN" \
      FullRepositoryId="MouradNASRI/TradeMesh" \
      BranchName=main \
      CreateBuildProject=true \
      CodeBuildServiceRoleArn="$CB_ROLE_ARN" \
      StackName=trd-streams \
      TemplateFilePath=cloudFormation/stacks/streams-events.yml \
      TemplateConfigPath=cloudFormation/envs/dev/streams-params.json \
      ChangeSetName=cs-streams


aws cloudformation describe-stacks --region us-east-1 \
  --stack-name trd-codepipeline-github --query 'Stacks[0].StackStatus'

EXEC_ID=$(aws codepipeline start-pipeline-execution \
  --name trd-foundation-pipeline \
  --query pipelineExecutionId --output text)

aws codepipeline get-pipeline-execution \
  --pipeline-name trd-foundation-pipeline --pipeline-execution-id "$EXEC_ID" \
  --query 'pipelineExecution.status'

aws cloudformation describe-stack-events \
  --region us-east-1 \
  --stack-name trd-streams \
  --query "StackEvents[?contains(ResourceStatus,'FAILED') || contains(ResourceStatus,'ROLLBACK')].[Timestamp,LogicalResourceId,ResourceStatus,ResourceStatusReason]" \
  --output table

aws cloudformation delete-stack --region us-east-1 --stack-name trd-codepipeline-deploy

aws cloudformation wait stack-delete-complete --region us-east-1 --stack-name trd-codepipeline-deploy


#Test of what has been done so far:

AWS_REGION=us-east-1
STREAM_STACK=trd-streams

QURL=$(aws cloudformation describe-stacks --region $AWS_REGION --stack-name $STREAM_STACK \
  --query "Stacks[0].Outputs[?OutputKey=='HeartbeatQueueUrl'].OutputValue" --output text)

BUS_ARN=$(aws cloudformation describe-stacks --region $AWS_REGION --stack-name $STREAM_STACK \
  --query "Stacks[0].Outputs[?OutputKey=='EventBusArn'].OutputValue" --output text)

STREAM_NAME=$(aws cloudformation describe-stacks --region $AWS_REGION --stack-name $STREAM_STACK \
  --query "Stacks[0].Outputs[?OutputKey=='TicksStreamName'].OutputValue" --output text)

DLQURL=$(aws cloudformation describe-stacks --region $AWS_REGION --stack-name $STREAM_STACK \
  --query "Stacks[0].Outputs[?OutputKey=='DLQUrl'].OutputValue" --output text)

echo "Queue=$QURL"
echo "BusArn=$BUS_ARN"
echo "Stream=$STREAM_NAME"

aws events put-events --region $AWS_REGION --entries "[
  {\"Source\":\"trd.heartbeat\",\"DetailType\":\"heartbeat\",
   \"Detail\":\"{\\\"interval\\\":\\\"test\\\"}\",\"EventBusName\":\"${BUS_ARN}\"}
]"

HANDLE=$(aws sqs receive-message \
  --queue-url "$QURL" \
  --max-number-of-messages 1 \
  --query 'Messages[0].ReceiptHandle' \
  --output text)

aws sqs delete-message \
  --queue-url "$QURL" \
  --receipt-handle "$HANDLE"

aws scheduler get-schedule --region $AWS_REGION --name trd-heartbeat-5m \
  --query '{State:State,Next:NextInvocationTime,Expr:ScheduleExpression}'


HANDLEDLQ=$(aws sqs receive-message \
  --queue-url "$DLQURL" \
  --max-number-of-messages 1 \
  --query 'Messages[0].ReceiptHandle' \
  --output text)

DATA=$(printf '{"symbol":"AAPL","price":189.23,"ts":"%s"}' "$(date -u +%FT%TZ)")
B64=$(printf '%s' "$DATA" | base64 -w0 2>/dev/null || printf '%s' "$DATA" | base64)

aws kinesis put-record --region $AWS_REGION \
  --stream-name "$STREAM_NAME" --partition-key "test" --data "$B64"

SHARD=$(aws kinesis list-shards --region $AWS_REGION --stream-name "$STREAM_NAME" \
  --query 'Shards[0].ShardId' --output text)

ITER=$(aws kinesis get-shard-iterator --region $AWS_REGION \
  --stream-name "$STREAM_NAME" --shard-id "$SHARD" \
  --shard-iterator-type TRIM_HORIZON --query 'ShardIterator' --output text)

aws kinesis get-records --region $AWS_REGION --shard-iterator "$ITER" --limit 10



aws events put-events --region $AWS_REGION --entries "[
  {\"Source\":\"trd.heartbeat\",\"DetailType\":\"heartbeat\",
   \"Detail\":\"{\\\"interval\\\":\\\"test\\\"}\",\"EventBusName\":\"${BUS_ARN}\"}
]"

aws events put-events --region $AWS_REGION --entries "[
  {\"Source\":\"trd.heartbeat\",\"DetailType\":\"heartbeat\",
   \"Detail\":\"{\\\"interval\\\":\\\"test\\\"}\",\"EventBusName\":\"${BUS_ARN}\"}
]"

aws events put-events --region $AWS_REGION --entries "[
  {\"Source\":\"trd.heartbeat\",\"DetailType\":\"heartbeat\",
   \"Detail\":\"{\\\"interval\\\":\\\"test\\\"}\",\"EventBusName\":\"${BUS_ARN}\"}
]"

aws events put-events --region $AWS_REGION --entries "[
  {\"Source\":\"trd.heartbeat\",\"DetailType\":\"heartbeat\",
   \"Detail\":\"{\\\"interval\\\":\\\"test\\\"}\",\"EventBusName\":\"${BUS_ARN}\"}
]"

for i in {1..10}; do
  aws sqs receive-message --region $AWS_REGION --queue-url "$QURL" \
    --max-number-of-messages 1 --visibility-timeout 0 --wait-time-seconds 2
done

DLQ_URL=$(aws sqs list-queues --region $AWS_REGION --query "QueueUrls[?contains(@, 'trd-signals-dlq')]|[0]" --output text)

aws sqs receive-message --region $AWS_REGION --queue-url "$DLQ_URL" --max-number-of-messages 10 --wait-time-seconds 5

# Bus has the rule targeting your queue
aws events list-targets-by-rule --region $AWS_REGION \
  --event-bus-name "$BUS_ARN" --rule trd-heartbeat-to-sqs

# IAM roles trust & perms (eyeball the JSON)
aws iam get-role --role-name trd-events-to-sqs-role
aws iam get-role --role-name <auto-generated name for SchedulerToEventsRole if you didn’t name it>

# Stack resources summary
aws cloudformation list-stack-resources --region $AWS_REGION --stack-name $STREAM_STACK \
  --output table


aws cloudformation deploy \
  --region us-east-1 \
  --stack-name trd-codepipeline-deploy \
  --template-file cloudformation/pipelines/codepipeline-deploy.yml \
  --parameter-overrides \
    PipelineName=trd-foundation-pipeline \
    ArtifactBucketName=$BUCKET_NAME \
    CodePipelineRoleArn=$CP_ROLE_ARN \
    CloudFormationExecutionRoleArn=$CFN_EXEC_ROLE_ARN \
    ConnectionArn=$CONNECTION_ARN \
    FullRepositoryId=MouradNASRI/TradeMesh \
    BranchName=main \
    CreateBuildProject=true \
    CodeBuildServiceRoleArn=$CB_ROLE_ARN \
    StackNameNetworking=trd-networking \
    NetworkingTemplatePath=cloudformation/stacks/networking.yml \
    NetworkingConfigPath=cloudformation/envs/dev/networking-params.json \
    ChangeSetNameNetworking=cs-networking \
    StackNameStreams=trd-streams \
    StreamsTemplatePath=cloudformation/stacks/streams-events.yml \
    StreamsConfigPath=cloudformation/envs/dev/streams-params.json \
    ChangeSetNameStreams=cs-streams \
  --capabilities CAPABILITY_NAMED_IAM