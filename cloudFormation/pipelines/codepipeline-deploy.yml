AWSTemplateFormatVersion: '2010-09-09'
Description: >
  TradeMesh - Deploy pipeline (GitHub via CodeStar Connections) -> CodeBuild -> CloudFormation.
  Deploys multiple stacks (Networking, Streams) in order using Change Sets.

# =========================
# Parameters (tunable)
# =========================
Parameters:
  # Pipeline identity
  PipelineName:                  { Type: String, Default: trd-foundation-pipeline }

  # Artifact store (S3) & roles (created in your bootstrap/IAM stacks)
  ArtifactBucketName:            { Type: String, Description: S3 bucket for CodePipeline artifacts }
  CodePipelineRoleArn:           { Type: String, Description: IAM role assumed by CodePipeline }
  CloudFormationExecutionRoleArn:{ Type: String, Description: IAM role used by CFN actions }

  # (Optional) KMS key to encrypt artifacts at rest in CodePipeline
  ArtifactKmsKeyArn:             { Type: String, Default: "", Description: Optional CMK ARN for artifact encryption }

  # GitHub source via CodeStar/CodeConnections
  ConnectionArn:                 { Type: String, Description: CodeStar/CodeConnections ARN (Region must match pipeline) }
  FullRepositoryId:              { Type: String, Description: GitHub org/repo, e.g., MouradNASRI/TradeMesh }
  BranchName:                    { Type: String, Default: main }

  # CodeBuild project (created here or referenced)
  CreateBuildProject:            { Type: String, AllowedValues: ["true","false"], Default: "true" }
  CodeBuildServiceRoleArn:       { Type: String, Default: "", Description: Required when CreateBuildProject=true }
  CodeBuildProjectName:          { Type: String, Default: "", Description: Use existing project when CreateBuildProject=false }
  BuildImage:                    { Type: String, Default: aws/codebuild/standard:7.0 }
  BuildComputeType:              { Type: String, Default: BUILD_GENERAL1_SMALL }
  LogsGroupName:                 { Type: String, Default: /aws/codebuild/trd-pipeline-build }

  # ---- Stack 1: Networking
  StackNameNetworking:           { Type: String, Default: trd-networking }
  NetworkingTemplatePath:        { Type: String, Default: cloudformation/stacks/networking.yml }
  NetworkingConfigPath:          { Type: String, Default: cloudformation/envs/dev/networking-params.json }
  ChangeSetNameNetworking:       { Type: String, Default: cs-networking }

  # ---- Stack 2: Streams & Events
  StackNameStreams:              { Type: String, Default: trd-streams }
  StreamsTemplatePath:           { Type: String, Default: cloudformation/stacks/streams-events.yml }
  StreamsConfigPath:             { Type: String, Default: cloudformation/envs/dev/streams-params.json }
  ChangeSetNameStreams:          { Type: String, Default: cs-streams }

# =========================
# Conditions
# =========================
Conditions:
  CreateBuildProjectCond: !Equals [ !Ref CreateBuildProject, "true" ]
  UseArtifactCMK:         !Not   [ !Equals [ !Ref ArtifactKmsKeyArn, "" ] ]

# =========================
# Resources
# =========================
Resources:

  # -----------------------------------------
  # CodeBuild logs (kept short; adjust as needed)
  # -----------------------------------------
  BuildLogs:
    Type: AWS::Logs::LogGroup
    Condition: CreateBuildProjectCond
    Properties:
      LogGroupName: !Ref LogsGroupName
      RetentionInDays: 14

  # -----------------------------------------
  # CodeBuild project (optional)
  #  - Buildspec is overridden again in the Pipeline action for belt & suspenders.
  #  - Keep directories in artifacts (handled in your buildspec: discard-paths: no).
  # -----------------------------------------
  BuildProject:
    Type: AWS::CodeBuild::Project
    Condition: CreateBuildProjectCond
    Properties:
      Name: !Sub '${PipelineName}-build'
      ServiceRole: !Ref CodeBuildServiceRoleArn
      Artifacts: { Type: CODEPIPELINE }
      Environment:
        ComputeType: !Ref BuildComputeType
        Image: !Ref BuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: false
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogsGroupName
          Status: ENABLED
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspecs/buildspec.deploy.yml
      TimeoutInMinutes: 30

  # -----------------------------------------
  # CodePipeline (Source -> Build -> Approve -> Deploy)
  # -----------------------------------------
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      RoleArn: !Ref CodePipelineRoleArn
      RestartExecutionOnUpdate: true
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucketName
        EncryptionKey: !If
          - UseArtifactCMK
          - { Id: !Ref ArtifactKmsKeyArn, Type: KMS }
          - !Ref 'AWS::NoValue'
      Stages:

        # ============== 1) SOURCE (GitHub via CodeStar Connection) ==============
        - Name: Source
          Actions:
            - Name: GitHub
              ActionTypeId: { Category: Source, Owner: AWS, Provider: CodeStarSourceConnection, Version: '1' }
              Configuration:
                ConnectionArn:  !Ref ConnectionArn
                FullRepositoryId: !Ref FullRepositoryId
                BranchName:     !Ref BranchName
                DetectChanges:  true     # webhook from CodeConnections
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts: [ { Name: SourceArtifact } ]
              RunOrder: 1

        # ============== 2) BUILD (package CFN files; preserve folder structure) ==============
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId: { Category: Build, Owner: AWS, Provider: CodeBuild, Version: '1' }
              Configuration:
                ProjectName: !If [ CreateBuildProjectCond, !Ref BuildProject, !Ref CodeBuildProjectName ]
                BuildspecOverride: buildspecs/buildspec.deploy.yml   # ensures paths & files we expect
                PrimarySource: SourceArtifact
              InputArtifacts:  [ { Name: SourceArtifact } ]
              OutputArtifacts: [ { Name: BuildArtifact } ]
              RunOrder: 1

        # ============== 3) APPROVAL (single manual gate) ==============
        - Name: Approve
          Actions:
            - Name: ManualApproval
              ActionTypeId: { Category: Approval, Owner: AWS, Provider: Manual, Version: '1' }
              RunOrder: 1

        # ============== 4) DEPLOY (Create/Execute for each stack in order) ==============
        - Name: Deploy
          Actions:

            # --- Networking: Create Change Set ---
            - Name: CFNCreateNetworkingCS
              ActionTypeId: { Category: Deploy, Owner: AWS, Provider: CloudFormation, Version: '1' }
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Ref StackNameNetworking
                ChangeSetName: !Ref ChangeSetNameNetworking
                TemplatePath:          !Sub 'BuildArtifact::${NetworkingTemplatePath}'
                TemplateConfiguration: !Sub 'BuildArtifact::${NetworkingConfigPath}'
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Ref CloudFormationExecutionRoleArn
              InputArtifacts: [ { Name: BuildArtifact } ]
              RunOrder: 1

            # --- Networking: Execute Change Set ---
            - Name: CFNExecuteNetworkingCS
              ActionTypeId: { Category: Deploy, Owner: AWS, Provider: CloudFormation, Version: '1' }
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Ref StackNameNetworking
                ChangeSetName: !Ref ChangeSetNameNetworking
                RoleArn: !Ref CloudFormationExecutionRoleArn
              RunOrder: 2

            # --- Streams & Events: Create Change Set ---
            - Name: CFNCreateStreamsCS
              ActionTypeId: { Category: Deploy, Owner: AWS, Provider: CloudFormation, Version: '1' }
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                StackName: !Ref StackNameStreams
                ChangeSetName: !Ref ChangeSetNameStreams
                TemplatePath:          !Sub 'BuildArtifact::${StreamsTemplatePath}'
                TemplateConfiguration: !Sub 'BuildArtifact::${StreamsConfigPath}'
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !Ref CloudFormationExecutionRoleArn
              InputArtifacts: [ { Name: BuildArtifact } ]
              RunOrder: 3

            # --- Streams & Events: Execute Change Set ---
            - Name: CFNExecuteStreamsCS
              ActionTypeId: { Category: Deploy, Owner: AWS, Provider: CloudFormation, Version: '1' }
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                StackName: !Ref StackNameStreams
                ChangeSetName: !Ref ChangeSetNameStreams
                RoleArn: !Ref CloudFormationExecutionRoleArn
              RunOrder: 4

# =========================
# Outputs
# =========================
Outputs:
  PipelineNameOut:       { Value: !Ref Pipeline }
  BuildProjectNameOut:
    Condition: CreateBuildProjectCond
    Value: !Ref BuildProject
