AWSTemplateFormatVersion: '2010-09-09'
Description: Trading Platform â€” Streams & Events (Kinesis, EventBridge, SQS, alarms, scheduler DLQ/retries)

# -------------------------
# Parameters (tunable)
# -------------------------
Parameters:
  NamePrefix:              { Type: String, Default: trd }
  StreamShardCount:        { Type: Number, Default: 1, MinValue: 1 }     # dev: 1 shard; scale later
  StreamRetentionHours:    { Type: Number, Default: 24, MinValue: 24, MaxValue: 8760 }
  EventBusName:            { Type: String, Default: trd-app-bus }

  # Alarms / heartbeat knobs
  CreateAlarms:            { Type: String, AllowedValues: [true,false], Default: true }
  EnableHeartbeat:         { Type: String, AllowedValues: [true,false], Default: true }
  HeartbeatRate:           { Type: String, Default: 'rate(5 minutes)' }  # e.g., cron(0/5 * * * ? *)

  # Scheduler hardening
  CreateSchedulerDLQ:      { Type: String, AllowedValues: [true,false], Default: true }
  SchedulerMaxRetryAttempts:      { Type: Number, Default: 2, MinValue: 0, MaxValue: 185 }
  SchedulerMaxEventAgeSeconds:    { Type: Number, Default: 3600, MinValue: 60, MaxValue: 86400 }

# -------------------------
# Conditions
# -------------------------
Conditions:
  DoAlarms:        !Equals [!Ref CreateAlarms, "true"]
  DoHeartbeat:     !Equals [!Ref EnableHeartbeat, "true"]
  HasSchedulerDLQ: !Equals [!Ref CreateSchedulerDLQ, "true"]

# -------------------------
# Resources
# -------------------------
Resources:

  # --- Kinesis: raw ticks stream (keep small in dev; add shards on load)
  TicksStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${NamePrefix}-ticks'
      ShardCount: !Ref StreamShardCount
      RetentionPeriodHours: !Ref StreamRetentionHours
      StreamEncryption:                    # encryption at rest (AWS-managed KMS)
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  # --- EventBridge: dedicated app bus (domain events)
  AppBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventBusName

  # --- Scheduler DLQ (optional): captures failed schedule deliveries
  SchedulerDLQ:
    Type: AWS::SQS::Queue
    Condition: HasSchedulerDLQ
    Properties:
      QueueName: !Sub '${NamePrefix}-scheduler-dlq'

  # --- IAM role: Scheduler -> PutEvents on AppBus (+ SQS send if DLQ is enabled)
  SchedulerToEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: scheduler.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PutEventsAndDLQ
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: PutToAppBus
                Effect: Allow
                Action: events:PutEvents
                Resource: !GetAtt AppBus.Arn
              - Sid: SendToSchedulerDLQ
                Effect: Allow
                Action: sqs:SendMessage
                Resource: !If [HasSchedulerDLQ, !GetAtt SchedulerDLQ.Arn, !Ref 'AWS::NoValue' ]

  # --- Heartbeat event producer (Scheduler -> AppBus), hardened with DLQ & retries
  HeartbeatScheduleToBus:
    Type: AWS::Scheduler::Schedule
    Condition: DoHeartbeat
    Properties:
      Name: !Sub '${NamePrefix}-heartbeat-5m'
      State: ENABLED
      FlexibleTimeWindow: { Mode: OFF }          # fire on time; add jitter by widening this window
      ScheduleExpression: !Ref HeartbeatRate
      Target:
        Arn: !GetAtt AppBus.Arn
        RoleArn: !GetAtt SchedulerToEventsRole.Arn
        EventBridgeParameters:
          DetailType: heartbeat
          Source: trd.heartbeat
        Input: '{"interval":"5m"}'               # goes to event.detail
        DeadLetterConfig:                        # optional DLQ for failed deliveries
          Arn: !If [HasSchedulerDLQ, !GetAtt SchedulerDLQ.Arn, !Ref 'AWS::NoValue' ]
        RetryPolicy:                             # basic retry/backoff guardrails
          MaximumEventAgeInSeconds: !Ref SchedulerMaxEventAgeSeconds
          MaximumRetryAttempts: !Ref SchedulerMaxRetryAttempts

  # --- SQS: app events queue (+ DLQ for consumer failures)
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${NamePrefix}-signals-dlq'
      MessageRetentionPeriod: 1209600            # 14 days

  HeartbeatQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${NamePrefix}-events'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5

  # --- IAM role: EventBridge Rule -> SQS (least privilege)
  EventsToSqsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendToSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt HeartbeatQueue.Arn

  # --- Rule: route heartbeat events from AppBus -> SQS
  HeartbeatBusToQueueRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${NamePrefix}-heartbeat-to-sqs'
      EventBusName: !Ref AppBus
      EventPattern:
        source: ['trd.heartbeat']
        detail-type: ['heartbeat']
      Targets:
        - Id: toSqs
          Arn: !GetAtt HeartbeatQueue.Arn
          RoleArn: !GetAtt EventsToSqsRole.Arn

  # --- SQS policy: allow ONLY this rule to send to the queue
  HeartbeatQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [ !Ref HeartbeatQueue ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowEventBridgeRuleOnly
            Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sqs:SendMessage
            Resource: !GetAtt HeartbeatQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt HeartbeatBusToQueueRule.Arn

  # --- CloudWatch Alarm: Kinesis consumer lag (optional)
  IteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DoAlarms
    Properties:
      AlarmName: !Sub '${NamePrefix}-ticks-iterator-age-high'
      AlarmDescription: 'Kinesis consumer lag (IteratorAge) > 30s'
      Namespace: AWS/Kinesis
      MetricName: GetRecords.IteratorAgeMilliseconds
      Dimensions:
        - Name: StreamName
          Value: !Ref TicksStream
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 30000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

# -------------------------
# Outputs (feed other stacks)
# -------------------------
Outputs:
  TicksStreamName: { Value: !Ref TicksStream, Export: { Name: !Sub '${AWS::StackName}-TicksStreamName' } }
  TicksStreamArn:  { Value: !GetAtt TicksStream.Arn, Export: { Name: !Sub '${AWS::StackName}-TicksStreamArn' } }
  EventBusArn:     { Value: !GetAtt AppBus.Arn, Export: { Name: !Sub '${AWS::StackName}-EventBusArn' } }
  HeartbeatQueueUrl: { Value: !Ref HeartbeatQueue }
  DLQUrl:            { Value: !Ref DeadLetterQueue }
  SchedulerDLQUrl:
    Condition: HasSchedulerDLQ
    Value: !Ref SchedulerDLQ
