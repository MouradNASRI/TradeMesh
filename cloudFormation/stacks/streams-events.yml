AWSTemplateFormatVersion: '2010-09-09'
Description: >
  TradeMesh â€” Streams & Events.
  Kinesis (ticks), EventBridge app bus, Scheduler heartbeat (DLQ+retries),
  SQS (events + DLQ), rule for routing, CloudWatch iterator-age alarm.

Parameters:
  NamePrefix:              { Type: String, Default: trd }
  StreamShardCount:        { Type: Number, Default: 1, MinValue: 1 }
  StreamRetentionHours:    { Type: Number, Default: 24, MinValue: 24, MaxValue: 8760 }
  EventBusName:            { Type: String, Default: trd-app-bus }

  CreateAlarms:            { Type: String, AllowedValues: [true,false], Default: true }
  EnableHeartbeat:         { Type: String, AllowedValues: [true,false], Default: true }
  HeartbeatRate:           { Type: String, Default: 'rate(5 minutes)' }

  CreateSchedulerDLQ:      { Type: String, AllowedValues: [true,false], Default: true }
  SchedulerMaxRetryAttempts:      { Type: Number, Default: 2, MinValue: 0, MaxValue: 185 }
  SchedulerMaxEventAgeSeconds:    { Type: Number, Default: 3600, MinValue: 60, MaxValue: 86400 }

Conditions:
  DoAlarms:        !Equals [!Ref CreateAlarms, "true"]
  DoHeartbeat:     !Equals [!Ref EnableHeartbeat, "true"]
  HasSchedulerDLQ: !Equals [!Ref CreateSchedulerDLQ, "true"]

Resources:

  # --- Kinesis: raw ticks stream (encrypted, low idle cost at 1 shard)
  TicksStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${NamePrefix}-ticks'
      ShardCount: !Ref StreamShardCount
      RetentionPeriodHours: !Ref StreamRetentionHours
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  # --- EventBridge: dedicated app bus (keeps domain events off default bus)
  AppBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventBusName

  # --- Optional DLQ for Scheduler (captures publish failures)
  SchedulerDLQ:
    Type: AWS::SQS::Queue
    Condition: HasSchedulerDLQ
    Properties:
      QueueName: !Sub '${NamePrefix}-scheduler-dlq'

  # --- IAM role for Scheduler to publish to the app bus (and DLQ if needed)
  SchedulerToEventsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: scheduler.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PutToBusAndDLQ
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: PutToBus
                Effect: Allow
                Action: events:PutEvents
                Resource: !GetAtt AppBus.Arn
              - Sid: ToSchedulerDLQ
                Effect: Allow
                Action: sqs:SendMessage
                Resource: !If [HasSchedulerDLQ, !GetAtt SchedulerDLQ.Arn, !Ref 'AWS::NoValue' ]

  # --- Heartbeat: Scheduler -> AppBus with DLQ + retries (synthetic health/cron)
  HeartbeatScheduleToBus:
    Type: AWS::Scheduler::Schedule
    Condition: DoHeartbeat
    Properties:
      Name: !Sub '${NamePrefix}-heartbeat-5m'
      State: ENABLED
      FlexibleTimeWindow: { Mode: "OFF" }    # quote "OFF" to avoid YAML bool pitfalls
      ScheduleExpression: !Ref HeartbeatRate
      Target:
        Arn: !GetAtt AppBus.Arn
        RoleArn: !GetAtt SchedulerToEventsRole.Arn
        EventBridgeParameters:
          DetailType: heartbeat
          Source: trd.heartbeat
        Input: '{"interval":"5m"}'
        DeadLetterConfig:
          Arn: !If [HasSchedulerDLQ, !GetAtt SchedulerDLQ.Arn, !Ref 'AWS::NoValue' ]
        RetryPolicy:
          MaximumEventAgeInSeconds: !Ref SchedulerMaxEventAgeSeconds
          MaximumRetryAttempts: !Ref SchedulerMaxRetryAttempts

  # --- SQS: app events queue + DLQ (consumer failures)
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${NamePrefix}-signals-dlq'
      MessageRetentionPeriod: 1209600  # 14 days

  HeartbeatQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${NamePrefix}-events'
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5

  # --- EventBridge Rule: route heartbeat events from AppBus -> SQS
  EventsToSqsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendToSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt HeartbeatQueue.Arn

  HeartbeatBusToQueueRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${NamePrefix}-heartbeat-to-sqs'
      EventBusName: !Ref AppBus
      EventPattern:
        source: ['trd.heartbeat']
        detail-type: ['heartbeat']
      Targets:
        - Id: toSqs
          Arn: !GetAtt HeartbeatQueue.Arn
          RoleArn: !GetAtt EventsToSqsRole.Arn

  # --- Queue policy: allow only this rule to send to the queue (least privilege)
  HeartbeatQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [ !Ref HeartbeatQueue ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowEventBridgeRuleOnly
            Effect: Allow
            Principal: { Service: events.amazonaws.com }
            Action: sqs:SendMessage
            Resource: !GetAtt HeartbeatQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt HeartbeatBusToQueueRule.Arn

  # --- CloudWatch alarm: Kinesis consumer lag (iterator age)
  IteratorAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: DoAlarms
    Properties:
      AlarmName: !Sub '${NamePrefix}-ticks-iterator-age-high'
      AlarmDescription: 'Kinesis consumer lag (IteratorAge) > 30s'
      Namespace: AWS/Kinesis
      MetricName: GetRecords.IteratorAgeMilliseconds
      Dimensions:
        - Name: StreamName
          Value: !Ref TicksStream
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 3
      Threshold: 30000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

Outputs:
  TicksStreamName:   { Value: !Ref TicksStream }
  TicksStreamArn:    { Value: !GetAtt TicksStream.Arn }
  EventBusArn:       { Value: !GetAtt AppBus.Arn }
  HeartbeatQueueUrl: { Value: !Ref HeartbeatQueue }
  DLQUrl:            { Value: !Ref DeadLetterQueue }
