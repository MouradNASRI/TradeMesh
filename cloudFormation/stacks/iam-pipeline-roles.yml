AWSTemplateFormatVersion: '2010-09-09'
Description: TradeMesh â€” CI/CD IAM (CodePipeline, CodeBuild, CloudFormation execution roles)

Parameters:
  NamePrefix:                    { Type: String, Default: trd }
  ArtifactBucketName:            { Type: String, Description: Artifacts S3 bucket name }
  ArtifactKmsKeyArn:             { Type: String, Description: KMS CMK ARN used by the artifacts bucket }
  ConnectionArn:                 { Type: String, Description: CodeStar/CodeConnections ARN for GitHub }

Resources:

  # ---------------------------
  # CodePipeline service role
  # ---------------------------
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamePrefix}-codepipeline-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codepipeline.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelineCore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Use GitHub Connection
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                  - codeconnections:UseConnection
                Resource: !Ref ConnectionArn

              # Talk to CodeBuild
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: '*'

              # Create/Execute/Inspect CFN ChangeSets (CFN itself will assume its own exec role)
              - Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplate
                Resource: '*'

              # Read/Write artifacts in S3 + decrypt/encrypt with our CMK
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Ref ArtifactKmsKeyArn

              # Allow passing the CFN execution role to CloudFormation actions
              - Effect: Allow
                Action: iam:PassRole
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-cfn-exec-role'

  # ---------------------------
  # CodeBuild service role
  #  - buildspec does CFN validate + lint + pulls/pushes artifacts
  # ---------------------------
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamePrefix}-codebuild-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: codebuild.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BuildPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Write logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              # CFN validation
              - Effect: Allow
                Action:
                  - cloudformation:ValidateTemplate
                Resource: '*'
              # S3 artifacts + KMS
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}'
                  - !Sub 'arn:aws:s3:::${ArtifactBucketName}/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: !Ref ArtifactKmsKeyArn

  # ---------------------------
  # CloudFormation execution role
  #  - CFN assumes this role during Create/Execute ChangeSet to create your resources
  #  - Broad but stack-scoped in practice; tighten over time if desired
  # ---------------------------
  CloudFormationExecRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${NamePrefix}-cfn-exec-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: cloudformation.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CFNCreateInfrastructure
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Core infra (VPC/NAT/RT/Subnets/IGW/VPC Endpoints)
              - Effect: Allow
                Action:
                  - ec2:*
                Resource: '*'
              # Kinesis / EventBridge / Scheduler / SQS / CloudWatch
              - Effect: Allow
                Action:
                  - kinesis:*
                  - events:*
                  - scheduler:*
                  - sqs:*
                  - logs:*
                  - cloudwatch:*
                Resource: '*'
              # IAM (only what CFN needs to create/attach inline policies and pass roles)
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PassRole
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${NamePrefix}-*'
              # KMS usage for encrypting resources created by stacks (optional)
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:DescribeKey
                Resource: '*'

Outputs:
  CodePipelineRoleArn:         { Value: !GetAtt CodePipelineRole.Arn }
  CodeBuildRoleArn:            { Value: !GetAtt CodeBuildRole.Arn }
  CloudFormationExecutionRoleArn: { Value: !GetAtt CloudFormationExecRole.Arn }
